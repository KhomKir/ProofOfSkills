Тестовое задание X-LAB

ЗАДАНИЕ:
1. Как проверить, что данные отправились на сервер, если у нас нет доступа к бэкенду?

Открыть DevTools, вкладку Network/JS/Headers и проверить статус код. Если запрос на сервер отображается с кодом состояния 200, то это означает, что запрос был успешно обработан и данные были получены.
=/=
2. Составить Smoke Test Suite для sobank.online

Smoke тесты выполняются, чтобы убедиться, что приложение работает нормально после крупных изменений в коде, фиксации багов или после обновления сервера. Вот несколько тестов, которые можно включить в Smoke Test Suite для sobank.online:
1. Проверка главной страницы:
Проверить, что главная страница sobank.online загружается без ошибок и содержит основные элементы, такие как логотип, форму для входа в аккаунт и меню навигации.
2. Проверка регистрации нового пользователя:
Попробовать зарегистрировать нового пользователя и убедиться, что новый пользователь успешно создан и может войти в свой аккаунт.
3. Проверка входа в аккаунт:
Попробовать войти в аккаунт с правильными учетными данными и убедиться, что вход происходит без ошибок и пользователь попадает на свою личную страницу.
4. Проверка перевода денег:
Попробовать сделать перевод денег с одного счета на другой и убедиться, что перевод происходит без ошибок и деньги поступают на нужный счет.
5. Проверка отображения баланса:
Проверить, что баланс на личной странице пользователя отображается корректно и соответствует фактическому балансу на счету.
6. Проверка вывода денег:
Попробовать вывести деньги со своего счета и убедиться, что вывод происходит без ошибок и деньги поступают на указанный счет.
7. Проверка работы чат-ботов: 
Проверить, что чат-система работает нормально, и сообщения могут быть отправлены и получены без задержек или ошибок.
8. Проверка работы мобильного приложения:
Если у sobank.online есть мобильное приложение, то можно включить тестирование его основных функций, таких как вход, перевод денег и просмотр баланса.
=/=
3. Есть метод POST, который регистрирует нового пользователя на сайте, есть тело запроса, содержащее данные о почте, телефоне, имени пользователя и адресе проживания. Какие кейсы для проверки можете привести?

1. Проверка валидации полей: проверка того, что поля для почты, телефона, имени пользователя и адреса не являются пустыми, содержат допустимые символы и соответствуют формату.
2. Проверка на уникальность: проверка, что почта и телефон нового пользователя уникальны и не совпадают с уже существующими пользователями.
3. Проверка на длину данных: проверка того, что введенные данные соответствуют максимальной длине, установленной для каждого поля.
4. Проверка на обработку ошибок: проверка, что в случае возникновения ошибок при регистрации нового пользователя, пользователь получит понятное сообщение об ошибке.
5. Проверка на безопасность пароля: проверка, что пароль удовлетворяет требованиям безопасности, например, длина пароля, использование символов верхнего и нижнего регистра, цифр и специальных символов.
6. Проверка на работоспособность: проверка того, что метод POST регистрации нового пользователя работает без ошибок и пользователь может успешно зарегистрироваться на сайте.
=/=
4. Вам нужно сделать Regression Testing за два дня. Как вы это сделаете, если Regression Run охватывает 1000 тест-кейсов?

1. Сначала предлагаю уделить внимание отчетам об ошибках, найденных в предыдущих тестах. Если некоторые ошибки не были устранены, они могут повториться в новой версии программного обеспечения, поэтому стоит проверить их повторное возникновение.
2. Далее, определить критические области системы, которые были затронуты изменениями, и сосредоточить Regression Testing на этих областях.
3. Определить, какие тест-кейсы являются ключевыми для проверки функциональности критических областей. Выберать наиболее критичные тест-кейсы для выполнения в первую очередь, а затем выполнить оставшиеся тесты в зависимости от оставшегося времени.
4. Определить приоритет тестов и выполнять тесты в соответствии с этим приоритетом. Это позволит сосредоточиться на более важных тестах, если время станет критически ограниченным.
5. Использовать автоматизированные средства тестирования, чтобы ускорить процесс и сократить время, затрачиваемое на выполнение Regression Testing.
=/=
5. Как сделать тест для API sobank.online (по API передаются формы анкеты)? Вид тестирования, техника тестирования, его реализация? Учитывайте, что в анкете подключен сторонний сервис https://dadata.ru

1. Вид тестирования: функциональное тестирование API.
2. Техника тестирования: тестирование с использованием тестовых данных.
3. Реализация:
	1. Изучить документацию API для понимания доступных методов, запросов и параметров.
	2. Создать тестовые данные, которые будут использоваться для заполнения формы анкеты. Можно использовать случайные значения или создать реалистичные данные, чтобы проверить, как хорошо API обрабатывает данные, введенные пользователем.
	3. Использовать инструменты для отправки запросов к API, например Postman, для проверки работоспособности API и проверки, что данные, отправленные через API, корректно обрабатываются и сохраняются.
	3.1 POST запрос через Postman:
	Создать коллекцию "sobank.online"
	Создать POST запрос:
	URL: https://sobank.online/credit_card/info
	body/raw(JSON):
	{
    "credit_target": {
        "value": "credit_card",
        "title": "Кредитная карта"
    },
    "credit_sum": "130 000",
    "name": "James",
    "surname": "Deen",
    "patronymic": "Jr",
    "email": "jamesdeen@example.com",
    "phone_number": "+1234567890",
    "gender": {
        "value": "MALE",
        "title": "Мужской"
    }
	}
	SAVE/SEND
	or
	3.2 POST запрос с созданием переменных в коллекции:
	VARIABLES:
	"name": "James",
	"surnamy": "Deen",
	"patronymic": "Jr",
    	"email": "jamesdeen@example.com",
    	"phone number": "+1234567890",
    	POST Params:
    	name={{name}}
	surname={{surname}}
	patronymic={{patronymic}}
    	email={{email}}
    	phone number={{phone number}}
    	https://sobank.online/api/form/create/auth_info?name={{name}}&surname={{surname}}&patronymic={{patronymic}}&email={{email}}&phone number={{phone number}}
    	SAVE/SEND

	Если необходимо выполнить скрипты перед запросом, во вкладке "Pre-request Scripts" можно написать скрипты, которые будут выполнены перед отправкой запроса.

	Ссылка на коллекцию:
	https://cloudy-flare-787029.postman.co/workspace/Team-Workspace~fc74ba34-ef20-4f2f-85ef-582eca82a7e0/collection/25091891-739424ba-fd8c-4f25-aa1b-fb0426a40483?action=share&creator=25091891

4. Обратить внимание на сторонний сервис dadata.ru и убедиться, что его использование не приводит к ошибкам или проблемам в работе API. Можно использовать моки для эмуляции поведения стороннего сервиса.
=/=
6. Напишите автотест для API (для одного двух полей)
Создадим тест, что в ответе на запрос содержится код 200 и имя, переданное в теле запроса.
В запросе POST "New Request with params" в "tests" внесем следующие сниппеты:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Check name", function () {
    pm.expect(pm.response.json().name).to.equal(pm.collectionVariables.get("name"));
});
SAVE/SEND
or
В запросе POST "New Request with body" в "tests" внесем следующие сниппеты:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Check name", function () {
    pm.expect(pm.response.json().name).to.equal(pm.request.body.raw("name"));
});
or
RUN из коллекции.
=/=
7. Напишите тест план регрессии для https://sobank.online/credit_card/info
	1. Проверка отображения информации о кредитной карте:
		- Проверить, что страница отображается корректно, без ошибок и с заданным заголовком "Кредитные карты".
		- Проверить, что на странице отображаются все необходимые элементы и поля (условия использования и оформления карты и т.д.).
	2. Проверка функциональности страницы:
		- Убедиться, что кнопки на странице работают корректно и выполняют соответствующие действия.
		- Проверить, что при нажатии на кнопки и ссылки на странице открываются соответствующие страницы без ошибок.
	3. Проверка валидации полей:
		- Проверить, что при отправке пустой формы выдается соответствующее сообщение об ошибке.
		- Проверить, что при отправке формы с некорректно заполненными полями (например, в поле фамилии ввести знак '/') выдается соответствующее сообщение об ошибке.
		- Проверить, что при отправке корректно заполненной формы данные успешно сохраняются.
	4. Проверка совместимости с различными браузерами и устройствами:
		- Проверить, что страница корректно отображается в различных браузерах (Chrome, Firefox, Safari, Edge).
		- Проверить, что страница корректно отображается на различных устройствах (настольные ПК, ноутбуки, планшеты, мобильные устройства).